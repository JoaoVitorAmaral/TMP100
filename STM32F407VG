#include <stm32f4xx_hal.h>
#include <stm32_hal_legacy.h>

#ifdef __cplusplus
extern "C"
#endif
void SysTick_Handler(void)
{
	HAL_IncTick();
	HAL_SYSTICK_IRQHandler();
}

I2C_HandleTypeDef hI2C;
int TMP100_SAwrite = 0x92;
int TMP100_SAread = 0x93;
uint16_t TMP100_TR = 0X00;
uint16_t TMP100_CR = 0X01;
uint16_t TMP_resolution12bits = 0x60;
uint8_t temperatureData[2] = {0, 0};
float temperatureRead = 0;
float temperatureThresholdHigh = 27; //oC

void setupLEDs();
void I2Csetup();
void TMP100_configuration(I2C_HandleTypeDef i2c_instance, uint16_t slaveAddress, uint16_t pointerRegister, uint16_t TMP_resolution);
float TMP100_readTemperature(I2C_HandleTypeDef i2c_instance, uint16_t slaveAddress, uint16_t pointerRegister, uint16_t sizeOfBytes, uint8_t temperatureBytes, uint16_t nOfBytes);

int main(void)
{
	HAL_Init();
	setupLEDs();
	I2Csetup();
	
	TMP100_configuration(hI2C, TMP100_SAwrite, TMP100_CR, TMP_resolution12bits);
	
	for(;;)
	{
		//Lê a temperatura e guarda em 2 bytes
		//HAL_I2C_Mem_Read(&hI2C, TMP100_SAread, TMP100_TR, 1, temperatureData, 2, HAL_MAX_DELAY);
		//temperatureRead = (float)temperatureData[0] + (float)temperatureData[1] / 256;
		temperatureRead = TMP100_readTemperature(hI2C, TMP100_SAwrite, TMP100_TR, 1, temperatureData, 2);
		
		if (temperatureRead > temperatureThresholdHigh)
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
		}
	}
}

void setupLEDs()
{
	__GPIOD_CLK_ENABLE();
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
}
void I2Csetup()
{
	__GPIOB_CLK_ENABLE();
	
	GPIO_InitTypeDef GPIO_I2Ccfg;
	GPIO_I2Ccfg.Pin = GPIO_PIN_10 | GPIO_PIN_11;
	GPIO_I2Ccfg.Mode = GPIO_MODE_AF_OD;
	GPIO_I2Ccfg.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_I2Ccfg.Pull = GPIO_NOPULL;
	GPIO_I2Ccfg.Alternate = GPIO_AF4_I2C2;
	HAL_GPIO_Init(GPIOB, &GPIO_I2Ccfg);

	__HAL_RCC_I2C2_CLK_ENABLE();
	
	hI2C.Instance = I2C2;
	hI2C.Init.ClockSpeed = 100000;
	hI2C.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	hI2C.Init.OwnAddress1 = 0;
	hI2C.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	hI2C.Init.OwnAddress2 = 0;
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE; 
	hI2C.Init.NoStretchMode =  I2C_NOSTRETCH_DISABLE; 
	HAL_I2C_Init(&hI2C);
}

void TMP100_configuration(I2C_HandleTypeDef i2c_instance, uint16_t slaveAddress, uint16_t pointerRegister, uint16_t TMP_resolution){
	//Configura a resolução do TMP100
	HAL_I2C_Mem_Write(&i2c_instance, slaveAddress, pointerRegister, 1, &TMP_resolution, 1, HAL_MAX_DELAY);
}

float TMP100_readTemperature(I2C_HandleTypeDef i2c_instance, uint16_t slaveAddress, uint16_t pointerRegister, uint16_t sizeOfBytes, uint8_t temperatureBytes, uint16_t nOfBytes)
{
	float temperature = 0;
	//Lê a temperatura e guarda em 2 bytes
	HAL_I2C_Mem_Read(&i2c_instance, slaveAddress, pointerRegister, sizeOfBytes, temperatureBytes, nOfBytes, HAL_MAX_DELAY);
		
	//Formata os dados do buffer TR do TMP100
	temperature = (float)temperatureBytes[0] + ((float)temperatureBytes[1]) / 256;
	
	return temperature;
}
